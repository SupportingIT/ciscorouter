package ciscoroutertool.gui;

import ciscoroutertool.rules.Rule;
import ciscoroutertool.scanner.FullReport;
import ciscoroutertool.scanner.HostReport;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import java.util.ArrayList;

/**
 * This window displays the output in a tree format and lets the user remove
 * nodes from the report, and then output it to a file.
 * @version 0.01ALPHA
 * @author Andrew H. Johnston
 */
public class OutputReview extends javax.swing.JFrame {

    private FullReport report;
    private DefaultMutableTreeNode selected = null;
    private DefaultTreeModel model;
    
    /**
     * Creates new form OutputReview
     */
    public OutputReview(FullReport r) {
        report = r;
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
        ArrayList<HostReport> reports = report.getReports();
        for (HostReport h : reports) {
            System.out.println("DEBUG: Host report for: " + h.getHost().toString());
            DefaultMutableTreeNode host = new DefaultMutableTreeNode(h.getHost().toString());
            System.out.println("DEBUG: Found " + h.getMatchedRules().size() + " matched rules");
            ArrayList<Rule> matchedRules = h.getMatchedRules();
            for (Rule rule : matchedRules) {
                System.out.println("\tDEBUG: Matched rule name: " + rule.getName());
                System.out.println("\tDEBUG: Matched rule description: " + rule.getDescription());
                DefaultMutableTreeNode ruleName = new DefaultMutableTreeNode(rule.getName());
                DefaultMutableTreeNode ruleDesc = new DefaultMutableTreeNode(rule.getDescription());
                ruleName.add(ruleDesc);
                host.add(ruleName);
            }
            root.add(host);
        }
        initComponents();
        model = new DefaultTreeModel(root);
        reportTree.setModel(model);
        //The following allows for us to select one node at a time (for deletion)
        reportTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        //Hide the root node so it looks like the hosts are the root node
        reportTree.setRootVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPrompt = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnCSV = new javax.swing.JButton();
        btnHTML1 = new javax.swing.JButton();
        btnCSV1 = new javax.swing.JButton();
        treeScrollPane = new javax.swing.JScrollPane();
        reportTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Review Output");

        lblPrompt.setText("Please review the following finds. Press delete to remove an item from the list.");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCSV.setText("Output to XML");

        btnHTML1.setText("Output to HTML");

        btnCSV1.setText("Output to CSV");

        treeScrollPane.setViewportView(reportTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrompt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCSV)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCSV1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHTML1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(treeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(589, 589, 589)
                                    .addComponent(btnDelete))))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(treeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHTML1)
                    .addComponent(btnCSV1)
                    .addComponent(btnCSV))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        selected = (DefaultMutableTreeNode) reportTree.getLastSelectedPathComponent();
        if (selected == null) {
            //Nothing is selected
            return;
        }
        //If it's a host
        if (selected.getPath().length == 2) {
            String hostname = selected.toString();
            int toDelete = this.getIndexOfHost(hostname);
            if (toDelete == -1) {
                return;
            }
            report.getReports().remove(toDelete);
        } else if (selected.getPath().length == 3) { //If it's a rule
            String host = selected.getParent().toString();
            String rule = selected.toString();
            int hostNum = this.getIndexOfHost(host);
            int ruleNum = this.getIndexofRule(hostNum, rule);
            if (hostNum == -1 || ruleNum == -1) {
                return;
            }
            report.getReports().get(hostNum).getMatchedRules().remove(ruleNum);
        }
        MutableTreeNode parent = (MutableTreeNode) selected.getParent();
        int index = parent.getIndex(selected);
        parent.remove(selected);
        model.nodesWereRemoved(parent, new int[]{index}, new Object[]{selected});
        reportTree.setModel(model);

    }//GEN-LAST:event_btnDeleteActionPerformed

    private int getIndexOfHost(String hostname) {
        int toDelete = -1;
        for (int i = 0; i < report.getReports().size(); i++) {
            String host = report.getReports().get(i).toString(); //Get this HostReport's host
            if (hostname.compareTo(host) == 0) {
                toDelete = i;
                break;
            }
        }
        //While this should *never* happen, it's safer to do it this way
        if (toDelete == -1) {
        } else { //We have an error, let's provide debugging information
            System.err.println("ERROR: Tried to delete host " + hostname + " but couldn't find it.");
        }
        return toDelete;
    }

    private int getIndexofRule(int host, String ruleName) {
        int toDelete = -1;
        for (int i = 0; i < report.getReports().size(); i++) {
            String rule = report.getReports().get(host).getMatchedRules().get(i).toString(); //Get this Host's rules
            if (rule.compareTo(ruleName) == 0) {
                toDelete = i;
                break;
            }
        }
        //While this should *never* happen, it's safer to do it this way
        if (toDelete == -1) {
            System.err.println("ERROR: Tried to delete rule " + ruleName + "on host " +
                    report.getReports().get(host).toString() + " but couldn't find it.");
        }
        return toDelete;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCSV;
    private javax.swing.JButton btnCSV1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHTML1;
    private javax.swing.JLabel lblPrompt;
    private javax.swing.JTree reportTree;
    private javax.swing.JScrollPane treeScrollPane;
    // End of variables declaration//GEN-END:variables
}
